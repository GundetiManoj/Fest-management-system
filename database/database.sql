drop TABLE IF EXISTS EventFirstWinnersView, EventParticipantsView, EventSecondWinnersView, EventThirdWinnersView CASCADE;
drop TABLE IF EXISTS sessions, AdministratorEmails, Administrators,ExternalParticipants,OrganizerEmails,Organizers,Venues,Events,Sponsors,Students,Volunteers,EventParticipants,EventExternalParticipants,EventStudents,EventOrganizers,EventSponsors,EventVolunteers,EventWinners CASCADE;


-- Session table
CREATE TABLE sessions (
    sid VARCHAR NOT NULL PRIMARY KEY,
    sess JSON NOT NULL,
    expire TIMESTAMP(6) NOT NULL
);

CREATE TABLE AdministratorEmails(
    EmailID VARCHAR(255) PRIMARY KEY
);

-- Administrators Table
CREATE TABLE Administrators (
    ID INT GENERATED BY DEFAULT AS IDENTITY 
   (START WITH 4001 INCREMENT BY 1) CHECK (ID <= 5000),
    FirstName VARCHAR(255) not null,
    LastName VARCHAR(255) not null,
    Hash VARCHAR(255) not null,
    Salt VARCHAR(255),
    EmailID VARCHAR(255) not null unique,
    UNIQUE(EmailID, ID),
    PRIMARY KEY (ID),
    FOREIGN KEY (EmailID) REFERENCES AdministratorEmails(EmailID) ON DELETE CASCADE
);

-- External Participant Table 
CREATE TABLE ExternalParticipants (
    ID INT GENERATED BY DEFAULT AS IDENTITY 
   (START WITH 2001 INCREMENT BY 1) CHECK (ID <= 3000),
    FirstName VARCHAR(255) not null,
    LastName VARCHAR(255) not null,
    Hash VARCHAR(255) not null,
    Salt VARCHAR(255),
    isVerified BOOLEAN,
    EmailToken VARCHAR(255),
    EmailID VARCHAR(255) not null unique,
    College VARCHAR(255) not null,
    GuestHouseName VARCHAR(255),
    RoomNumber VARCHAR(10),
    PRIMARY KEY (ID)
);

create TABLE OrganizerEmails (
    EmailID VARCHAR(255) PRIMARY KEY
);

-- Organizer Table
CREATE TABLE Organizers (
    ID INT GENERATED BY DEFAULT AS IDENTITY 
   (START WITH 3001 INCREMENT BY 1) CHECK (ID <= 4000),
    FirstName VARCHAR(255) not null,
    LastName VARCHAR(255) not null,
    Hash VARCHAR(255) not null,
    Salt VARCHAR(255),
    isVerified BOOLEAN,
    EmailID VARCHAR(255) not null unique,
    EmailToken VARCHAR(255),
    OrganiserType VARCHAR(255),
    UNIQUE(EmailID, ID),
    PRIMARY KEY (ID),
    FOREIGN KEY (EmailID) REFERENCES OrganizerEmails(EmailID) ON DELETE CASCADE
);

--Venue table 
CREATE TABLE Venues (
    ID INT GENERATED BY DEFAULT AS IDENTITY 
   (START WITH 1 INCREMENT BY 1),
    Name VARCHAR(255) not null,
    Capacity INT not null,
    PRIMARY KEY (ID)
);

-- Events Table
CREATE TABLE Events (
    ID INT GENERATED BY DEFAULT AS IDENTITY 
   (START WITH 1 INCREMENT BY 1),
    Name VARCHAR(255) not null,
    Type VARCHAR(255) not null,
    VenueID INT,
    Description TEXT,
    Date DATE not null,
    Time TIME not null,
    Prize DECIMAL(10, 2),
    PRIMARY KEY (ID),
    FOREIGN KEY (VenueID) REFERENCES Venues(ID) ON DELETE CASCADE
);


-- Sponsor Table
CREATE TABLE Sponsors (
    ID SERIAL PRIMARY KEY,
    Name VARCHAR(255) not null,
    EmailID VARCHAR(255) not null unique
);


--Student Table
CREATE TABLE Students (
    ID INT GENERATED BY DEFAULT AS IDENTITY 
   (START WITH 1001 INCREMENT BY 1) CHECK (ID <= 2000),
    FirstName VARCHAR(255) not null,
    LastName VARCHAR(255) not null,
    Hash VARCHAR(255) not null,
    Salt VARCHAR(255),
    isVerified BOOLEAN,
    EmailToken VARCHAR(255),
    EmailID VARCHAR(255) not null unique,
    isVolunteer BOOLEAN,
    PRIMARY KEY (ID)
);


--Volunteer Table 
CREATE TABLE Volunteers (
    StudentID INT PRIMARY KEY,
    FOREIGN KEY (StudentID) REFERENCES Students(ID) ON DELETE CASCADE
);



create Table EventParticipants(
    EventID INT,
    ParticipantID INT,
    PRIMARY KEY (EventID, ParticipantID),
    FOREIGN KEY (EventID) REFERENCES Events(ID) ON DELETE CASCADE
);

--EventExternalParticipants Table
create TABLE EventExternalParticipants (
    ID SERIAL PRIMARY KEY,
    EventID INT,
    ParticipantID INT,
    Unique(EventID, ParticipantID),
    FOREIGN KEY (EventID) REFERENCES Events(ID) ON DELETE CASCADE,
    FOREIGN KEY (ParticipantID) REFERENCES ExternalParticipants(ID) ON DELETE CASCADE
);

create or replace function deleteEventExternalParticipant()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventParticipants WHERE EventID = OLD.EventID AND ParticipantID = OLD.ParticipantID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER deleteEventExternalParticipantTrigger
BEFORE DELETE ON EventExternalParticipants
FOR EACH ROW
EXECUTE FUNCTION deleteEventExternalParticipant();

create or replace function addEventExternalParticipant()
    RETURNS TRIGGER 
    LANGUAGE PLPGSQL
AS $$
BEGIN
    INSERT INTO EventParticipants (EventID, ParticipantID) VALUES (NEW.EventID, NEW.ParticipantID);
    RETURN NEW;
END;
$$;

CREATE TRIGGER addEventExternalParticipantTrigger
AFTER INSERT ON EventExternalParticipants
FOR EACH ROW
EXECUTE FUNCTION addEventExternalParticipant();

create or replace function updateEventExternalParticipant()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventParticipants WHERE EventID = OLD.EventID AND ParticipantID = OLD.ParticipantID;
    INSERT INTO EventParticipants (EventID, ParticipantID) VALUES (NEW.EventID, NEW.ParticipantID);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER updateEventExternalParticipantTrigger
AFTER UPDATE ON EventExternalParticipants
FOR EACH ROW
EXECUTE FUNCTION updateEventExternalParticipant();

--EventStudentParticipants Table
create TABLE EventStudents (
    ID SERIAL PRIMARY KEY ,
    EventID INT,
    StudentID INT,
    Unique(EventID, StudentID),
    FOREIGN KEY (EventID) REFERENCES Events(ID) ON DELETE CASCADE,
    FOREIGN KEY (StudentID) REFERENCES Students(ID) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION deleteEventStudent()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventParticipants WHERE EventID = OLD.EventID AND ParticipantID = OLD.StudentID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER deleteEventStudentTrigger
AFTER DELETE ON EventStudents
FOR EACH ROW
EXECUTE FUNCTION deleteEventStudent();

CREATE OR REPLACE FUNCTION addEventStudent()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO EventParticipants (EventID, ParticipantID) VALUES (NEW.EventID, NEW.StudentID);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER addEventStudentTrigger
AFTER INSERT ON EventStudents
FOR EACH ROW
EXECUTE FUNCTION addEventStudent();

CREATE OR REPLACE FUNCTION updateEventStudent()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventParticipants WHERE EventID = OLD.EventID AND ParticipantID = OLD.StudentID;
    INSERT INTO EventParticipants (EventID, ParticipantID) VALUES (NEW.EventID, NEW.StudentID);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER updateEventStudentTrigger
AFTER UPDATE ON EventStudents
FOR EACH ROW
EXECUTE FUNCTION updateEventStudent();

--EventOrganizers Table
create TABLE EventOrganizers (
    ID SERIAL PRIMARY KEY,
    EventID INT,
    OrganizerID INT,
    Unique(EventID, OrganizerID),
    FOREIGN KEY (EventID) REFERENCES Events(ID) ON DELETE CASCADE,
    FOREIGN KEY (OrganizerID) REFERENCES Organizers(ID) ON DELETE CASCADE
);

--EventSponsors Table
create TABLE EventSponsors (
    ID SERIAL PRIMARY KEY,
    EventID INT,
    SponsorID INT,
    Unique(EventID, SponsorID),
    FOREIGN KEY (EventID) REFERENCES Events(ID) ON DELETE CASCADE,
    FOREIGN KEY (SponsorID) REFERENCES Sponsors(ID) ON DELETE CASCADE
);

--EventVolunteers Table
create TABLE EventVolunteers (
    EventID INT,
    VolunteerID INT,
    PRIMARY KEY (EventID, VolunteerID),
    FOREIGN KEY (EventID) REFERENCES Events(ID) ON DELETE CASCADE,
    FOREIGN KEY (VolunteerID) REFERENCES Volunteers(StudentID) ON DELETE CASCADE
);

create TABLE EventWinners (
    ID SERIAL PRIMARY KEY,
    EventID INT,
    FirstPrizeWinnerID INT,
    SecondPrizeWinnerID INT,
    ThirdPrizeWinnerID INT,
    Unique(EventID, FirstPrizeWinnerID, SecondPrizeWinnerID, ThirdPrizeWinnerID),
    FOREIGN KEY (EventID) REFERENCES Events(ID) ON DELETE CASCADE,
    FOREIGN KEY (EventID, FirstPrizeWinnerID) REFERENCES EventParticipants(EventID, ParticipantID) ON DELETE CASCADE,  
    FOREIGN KEY (EventID, SecondPrizeWinnerID) REFERENCES EventParticipants(EventID, ParticipantID) ON DELETE CASCADE,
    FOREIGN KEY (EventID, ThirdPrizeWinnerID) REFERENCES EventParticipants(EventID, ParticipantID) ON DELETE CASCADE
);

create or replace function makeStudentVolunteer()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE Students SET isVolunteer = true WHERE ID = NEW.StudentID;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER makeStudentVolunteerTrigger
AFTER INSERT ON Volunteers
FOR EACH ROW
EXECUTE FUNCTION makeStudentVolunteer();

create or replace function removeStudentVolunteer()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE Students SET isVolunteer = false WHERE ID = OLD.StudentID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER removeStudentVolunteerTrigger
AFTER DELETE ON Volunteers
FOR EACH ROW
EXECUTE FUNCTION removeStudentVolunteer();

-- need to create view for event winners
-- CREATE OR REPLACE VIEW EventParticipantsView AS
-- SELECT 
--     e.ID AS EventID,
--     e.Name AS EventName,
--     e.Type AS EventType,
--     e.VenueID AS VenueID,
--     e.Description AS Description,
--     e.Date AS Date,
--     e.Time AS Time,
--     e.Prize AS Prize,
--     COALESCE(s.ID, ex.ID) AS ParticipantID,
--     COALESCE(s.FirstName || ' ' || s.LastName,  ex.FirstName || ' ' || ex.LastName) AS ParticipantName,
--     COALESCE(s.EmailID, ex.EmailID) AS ParticipantEmailID,
--     COALESCE(ex.College, 'IIT Kharagpur') AS ParticipantCollege
-- FROM
--     Events e
--     LEFT JOIN EventParticipants ep ON e.ID = ep.EventID
--     LEFT JOIN Students s ON ep.ParticipantID = s.ID
--     LEFT JOIN ExternalParticipants ex ON ep.ParticipantID = ex.ID;

-- CREATE OR REPLACE View EventFirstWinnersView AS
-- SELECT 
--     e.ID AS EventID,
--     e.Name AS EventName,
--     e.Type AS EventType,
--     e.VenueID AS VenueID,
--     e.Description AS Description,
--     e.Date AS Date,
--     e.Time AS Time,
--     e.Prize AS Prize,
--     COALESCE(s.ID, ep.ID) AS ParticipantID,
--     COALESCE(s.FirstName || ' ' || s.LastName, ep.FirstName || ' ' || ep.LastName) AS ParticipantName,
--     COALESCE(s.EmailID, ep.EmailID) AS ParticipantEmailID,
--     COALESCE(ep.College, 'IIT Kharagpur') AS ParticipantCollege
-- FROM
--     Events e
--     LEFT JOIN EventWinners ew ON e.ID = ew.EventID
--     LEFT JOIN ExternalParticipants ep ON ew.FirstPrizeWinnerID = ep.ID
--     LEFT JOIN Students s ON ew.FirstPrizeWinnerID = s.ID;

-- CREATE OR REPLACE VIEW EventSecondWinnersView AS
-- SELECT 
--     e.ID AS EventID,
--     e.Name AS EventName,
--     e.Type AS EventType,
--     e.VenueID AS VenueID,
--     e.Description AS Description,
--     e.Date AS Date,
--     e.Time AS Time,
--     e.Prize AS Prize,
--     COALESCE(s.ID, ep.ID) AS ParticipantID,
--     COALESCE(s.FirstName || ' ' || s.LastName, ep.FirstName || ' ' || ep.LastName) AS ParticipantName,
--     COALESCE(s.EmailID, ep.EmailID) AS ParticipantEmailID,
--     COALESCE(ep.College, 'IIT Kharagpur') AS ParticipantCollege
-- FROM
--     Events e
--     LEFT JOIN EventWinners ew ON e.ID = ew.EventID
--     LEFT JOIN ExternalParticipants ep ON ew.SecondPrizeWinnerID = ep.ID
--     LEFT JOIN Students s ON ew.SecondPrizeWinnerID = s.ID;

-- CREATE OR REPLACE VIEW EventThirdWinnersView AS
-- SELECT  
--     e.ID AS EventID,
--     e.Name AS EventName,
--     e.Type AS EventType,
--     e.VenueID AS VenueID,
--     e.Description AS Description,
--     e.Date AS Date,
--     e.Time AS Time ,
--     e.Prize AS Prize,
--     COALESCE(s.ID, ep.ID) AS ParticipantID,
--     COALESCE(s.FirstName || ' ' || s.LastName, ep.FirstName || ' ' || ep.LastName) AS ParticipantName,
--     COALESCE(s.EmailID, ep.EmailID) AS ParticipantEmailID,
--     COALESCE(ep.College, 'IIT Kharagpur') AS ParticipantCollege
-- FROM
--     Events e
--     LEFT JOIN EventWinners ew ON e.ID = ew.EventID
--     LEFT JOIN ExternalParticipants ep ON ew.ThirdPrizeWinnerID = ep.ID
--     LEFT JOIN Students s ON ew.ThirdPrizeWinnerID = s.ID;

create table EventParticipantsView(
    EventID INT,
    EventName VARCHAR(255),
    EventType VARCHAR(255),
    VenueID INT,
    Description TEXT,
    Date DATE,
    Time TIME,
    Prize DECIMAL(10, 2),
    ParticipantID INT,
    ParticipantName VARCHAR(255),
    ParticipantEmailID VARCHAR(255),
    ParticipantCollege VARCHAR(255),
    PRIMARY KEY (EventID, ParticipantID)
);

create table EventFirstWinnersView(
    EventID INT,
    EventName VARCHAR(255),
    EventType VARCHAR(255),
    VenueID INT,
    Description TEXT,
    Date DATE,
    Time TIME,
    Prize DECIMAL(10, 2),
    ParticipantID INT,
    ParticipantName VARCHAR(255),
    ParticipantEmailID VARCHAR(255),
    ParticipantCollege VARCHAR(255),
    PRIMARY KEY (EventID, ParticipantID)
);

create table EventSecondWinnersView(
    EventID INT,
    EventName VARCHAR(255),
    EventType VARCHAR(255),
    VenueID INT,
    Description TEXT,
    Date DATE,
    Time TIME,
    Prize DECIMAL(10, 2),
    ParticipantID INT,
    ParticipantName VARCHAR(255),
    ParticipantEmailID VARCHAR(255),
    ParticipantCollege VARCHAR(255),
    PRIMARY KEY (EventID, ParticipantID)
);

create table EventThirdWinnersView(
    EventID INT,
    EventName VARCHAR(255),
    EventType VARCHAR(255),
    VenueID INT,
    Description TEXT,
    Date DATE,
    Time TIME,
    Prize DECIMAL(10, 2),
    ParticipantID INT,
    ParticipantName VARCHAR(255),
    ParticipantEmailID VARCHAR(255),
    ParticipantCollege VARCHAR(255),
    PRIMARY KEY (EventID, ParticipantID)
);

create or replace function deleteEventParticpantsView()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventParticipantsView WHERE EventID = OLD.EventID AND ParticipantID = OLD.ParticipantID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER deleteEventParticpantsViewTrigger
AFTER DELETE ON EventParticipants
FOR EACH ROW
EXECUTE FUNCTION deleteEventParticpantsView();

create or replace function addEventParticipantsView()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO EventParticipantsView (EventID, EventName, EventType, VenueID, Description, Date, Time, Prize, ParticipantID, ParticipantName, ParticipantEmailID, ParticipantCollege) 
    VALUES(
        (SELECT ID FROM Events WHERE ID = NEW.EventID),
        (SELECT Name FROM Events WHERE ID = NEW.EventID),
        (SELECT Type FROM Events WHERE ID = NEW.EventID),
        (SELECT VenueID FROM Events WHERE ID = NEW.EventID),
        (SELECT Description FROM Events WHERE ID = NEW.EventID),
        (SELECT Date FROM Events WHERE ID = NEW.EventID),
        (SELECT Time FROM Events WHERE ID = NEW.EventID),
        (SELECT Prize FROM Events WHERE ID = NEW.EventID),
        (SELECT ParticipantID FROM EventParticipants WHERE ParticipantID = NEW.ParticipantID),
        COALESCE((SELECT FirstName || ' ' || LastName FROM Students WHERE ID = NEW.ParticipantID), (SELECT FirstName || ' ' || LastName FROM ExternalParticipants WHERE ID = NEW.ParticipantID)),
        COALESCE((SELECT EmailID FROM Students WHERE ID = NEW.ParticipantID), (SELECT EmailID FROM ExternalParticipants WHERE ID = NEW.ParticipantID)),
        COALESCE((SELECT College FROM ExternalParticipants WHERE ID = NEW.ParticipantID), 'IIT Kharagpur')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER addEventParticipantsViewTrigger
AFTER INSERT ON EventParticipants
FOR EACH ROW
EXECUTE FUNCTION addEventParticipantsView();

create or replace function updateEventParticipantsView()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventParticipantsView WHERE EventID = OLD.EventID AND ParticipantID = OLD.ParticipantID;
    INSERT INTO EventParticipantsView (EventID, EventName, EventType, VenueID, Description, Date, Time, Prize, ParticipantID, ParticipantName, ParticipantEmailID, ParticipantCollege) 
    VALUES(
        (SELECT ID FROM Events WHERE ID = NEW.EventID),
        (SELECT Name FROM Events WHERE ID = NEW.EventID),
        (SELECT Type FROM Events WHERE ID = NEW.EventID),
        (SELECT VenueID FROM Events WHERE ID = NEW.EventID),
        (SELECT Description FROM Events WHERE ID = NEW.EventID),
        (SELECT Date FROM Events WHERE ID = NEW.EventID),
        (SELECT Time FROM Events WHERE ID = NEW.EventID),
        (SELECT Prize FROM Events WHERE ID = NEW.EventID),
        (SELECT ParticipantID FROM EventParticipants WHERE ParticipantID = NEW.ParticipantID),
        COALESCE((SELECT FirstName || ' ' || LastName FROM Students WHERE ID = NEW.ParticipantID), (SELECT FirstName || ' ' || LastName FROM ExternalParticipants WHERE ID = NEW.ParticipantID)),
        COALESCE((SELECT EmailID FROM Students WHERE ID = NEW.ParticipantID), (SELECT EmailID FROM ExternalParticipants WHERE ID = NEW.ParticipantID)),
        COALESCE((SELECT College FROM ExternalParticipants WHERE ID = NEW.ParticipantID), 'IIT Kharagpur')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER updateEventParticipantsViewTrigger
AFTER UPDATE ON EventParticipants
FOR EACH ROW
EXECUTE FUNCTION updateEventParticipantsView();

create or replace function deleteEventFirstWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventFirstWinnersView WHERE EventID = OLD.EventID AND ParticipantID = OLD.FirstPrizeWinnerID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER deleteEventFirstWinnersViewTrigger
AFTER DELETE ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION deleteEventFirstWinnersView();

create or replace function addEventFirstWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO EventFirstWinnersView (EventID, EventName, EventType, VenueID, Description, Date, Time, Prize, ParticipantID, ParticipantName, ParticipantEmailID, ParticipantCollege) 
    VALUES(
        (SELECT ID FROM Events WHERE ID = NEW.EventID),
        (SELECT Name FROM Events WHERE ID = NEW.EventID),
        (SELECT Type FROM Events WHERE ID = NEW.EventID),
        (SELECT VenueID FROM Events WHERE ID = NEW.EventID),
        (SELECT Description FROM Events WHERE ID = NEW.EventID),
        (SELECT Date FROM Events WHERE ID = NEW.EventID),
        (SELECT Time FROM Events WHERE ID = NEW.EventID),
        (SELECT Prize FROM Events WHERE ID = NEW.EventID),
        (SELECT ParticipantID FROM EventParticipants WHERE ParticipantID = NEW.FirstPrizeWinnerID),
        COALESCE((SELECT FirstName || ' ' || LastName FROM Students WHERE ID = NEW.FirstPrizeWinnerID), (SELECT FirstName || ' ' || LastName FROM ExternalParticipants WHERE ID = NEW.FirstPrizeWinnerID)),
        COALESCE((SELECT EmailID FROM Students WHERE ID = NEW.FirstPrizeWinnerID), (SELECT EmailID FROM ExternalParticipants WHERE ID = NEW.FirstPrizeWinnerID)),
        COALESCE((SELECT College FROM ExternalParticipants WHERE ID = NEW.FirstPrizeWinnerID), 'IIT Kharagpur')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER addEventFirstWinnersViewTrigger
AFTER INSERT ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION addEventFirstWinnersView();

create or replace function updateEventFirstWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventFirstWinnersView WHERE EventID = OLD.EventID AND ParticipantID = OLD.FirstPrizeWinnerID;
    INSERT INTO EventFirstWinnersView (EventID, EventName, EventType, VenueID, Description, Date, Time, Prize, ParticipantID, ParticipantName, ParticipantEmailID, ParticipantCollege) 
    VALUES(
        (SELECT ID FROM Events WHERE ID = NEW.EventID),
        (SELECT Name FROM Events WHERE ID = NEW.EventID),
        (SELECT Type FROM Events WHERE ID = NEW.EventID),
        (SELECT VenueID FROM Events WHERE ID = NEW.EventID),
        (SELECT Description FROM Events WHERE ID = NEW.EventID),
        (SELECT Date FROM Events WHERE ID = NEW.EventID),
        (SELECT Time FROM Events WHERE ID = NEW.EventID),
        (SELECT Prize FROM Events WHERE ID = NEW.EventID),
        (SELECT ParticipantID FROM EventParticipants WHERE ParticipantID = NEW.FirstPrizeWinnerID),
        COALESCE((SELECT FirstName || ' ' || LastName FROM Students WHERE ID = NEW.FirstPrizeWinnerID), (SELECT FirstName || ' ' || LastName FROM ExternalParticipants WHERE ID = NEW.FirstPrizeWinnerID)),
        COALESCE((SELECT EmailID FROM Students WHERE ID = NEW.FirstPrizeWinnerID), (SELECT EmailID FROM ExternalParticipants WHERE ID = NEW.FirstPrizeWinnerID)),
        COALESCE((SELECT College FROM ExternalParticipants WHERE ID = NEW.FirstPrizeWinnerID), 'IIT Kharagpur')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER updateEventFirstWinnersViewTrigger
AFTER UPDATE ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION updateEventFirstWinnersView();

create or replace function deleteEventSecondWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventSecondWinnersView WHERE EventID = OLD.EventID AND ParticipantID = OLD.SecondPrizeWinnerID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER deleteEventSecondWinnersViewTrigger
AFTER DELETE ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION deleteEventSecondWinnersView();

create or replace function addEventSecondWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO EventSecondWinnersView (EventID, EventName, EventType, VenueID, Description, Date, Time, Prize, ParticipantID, ParticipantName, ParticipantEmailID, ParticipantCollege) 
    VALUES(
        (SELECT ID FROM Events WHERE ID = NEW.EventID),
        (SELECT Name FROM Events WHERE ID = NEW.EventID),
        (SELECT Type FROM Events WHERE ID = NEW.EventID),
        (SELECT VenueID FROM Events WHERE ID = NEW.EventID),
        (SELECT Description FROM Events WHERE ID = NEW.EventID),
        (SELECT Date FROM Events WHERE ID = NEW.EventID),
        (SELECT Time FROM Events WHERE ID = NEW.EventID),
        (SELECT Prize FROM Events WHERE ID = NEW.EventID),
        (SELECT ParticipantID FROM EventParticipants WHERE ParticipantID = NEW.SecondPrizeWinnerID),
        COALESCE((SELECT FirstName || ' ' || LastName FROM Students WHERE ID = NEW.SecondPrizeWinnerID), (SELECT FirstName || ' ' || LastName FROM ExternalParticipants WHERE ID = NEW.SecondPrizeWinnerID)),
        COALESCE((SELECT EmailID FROM Students WHERE ID = NEW.SecondPrizeWinnerID), (SELECT EmailID FROM ExternalParticipants WHERE ID = NEW.SecondPrizeWinnerID)),
        COALESCE((SELECT College FROM ExternalParticipants WHERE ID = NEW.SecondPrizeWinnerID), 'IIT Kharagpur')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER addEventSecondWinnersViewTrigger
AFTER INSERT ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION addEventSecondWinnersView();

create or replace function updateEventSecondWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventSecondWinnersView WHERE EventID = OLD.EventID AND ParticipantID = OLD.SecondPrizeWinnerID;
    INSERT INTO EventSecondWinnersView (EventID, EventName, EventType, VenueID, Description, Date, Time, Prize, ParticipantID, ParticipantName, ParticipantEmailID, ParticipantCollege) 
    VALUES(
        (SELECT ID FROM Events WHERE ID = NEW.EventID),
        (SELECT Name FROM Events WHERE ID = NEW.EventID),
        (SELECT Type FROM Events WHERE ID = NEW.EventID),
        (SELECT VenueID FROM Events WHERE ID = NEW.EventID),
        (SELECT Description FROM Events WHERE ID = NEW.EventID),
        (SELECT Date FROM Events WHERE ID = NEW.EventID),
        (SELECT Time FROM Events WHERE ID = NEW.EventID),
        (SELECT Prize FROM Events WHERE ID = NEW.EventID),
        (SELECT ParticipantID FROM EventParticipants WHERE ParticipantID = NEW.SecondPrizeWinnerID),
        COALESCE((SELECT FirstName || ' ' || LastName FROM Students WHERE ID = NEW.SecondPrizeWinnerID), (SELECT FirstName || ' ' || LastName FROM ExternalParticipants WHERE ID = NEW.SecondPrizeWinnerID)),
        COALESCE((SELECT EmailID FROM Students WHERE ID = NEW.SecondPrizeWinnerID), (SELECT EmailID FROM ExternalParticipants WHERE ID = NEW.SecondPrizeWinnerID)),
        COALESCE((SELECT College FROM ExternalParticipants WHERE ID = NEW.SecondPrizeWinnerID), 'IIT Kharagpur')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER updateEventSecondWinnersViewTrigger
AFTER UPDATE ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION updateEventSecondWinnersView();

create or replace function deleteEventThirdWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventThirdWinnersView WHERE EventID = OLD.EventID AND ParticipantID = OLD.ThirdPrizeWinnerID;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER deleteEventThirdWinnersViewTrigger
AFTER DELETE ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION deleteEventThirdWinnersView();

create or replace function addEventThirdWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO EventThirdWinnersView (EventID, EventName, EventType, VenueID, Description, Date, Time, Prize, ParticipantID, ParticipantName, ParticipantEmailID, ParticipantCollege) 
    VALUES(
        (SELECT ID FROM Events WHERE ID = NEW.EventID),
        (SELECT Name FROM Events WHERE ID = NEW.EventID),
        (SELECT Type FROM Events WHERE ID = NEW.EventID),
        (SELECT VenueID FROM Events WHERE ID = NEW.EventID),
        (SELECT Description FROM Events WHERE ID = NEW.EventID),
        (SELECT Date FROM Events WHERE ID = NEW.EventID),
        (SELECT Time FROM Events WHERE ID = NEW.EventID),
        (SELECT Prize FROM Events WHERE ID = NEW.EventID),
        (SELECT ParticipantID FROM EventParticipants WHERE ParticipantID = NEW.ThirdPrizeWinnerID),
        COALESCE((SELECT FirstName || ' ' || LastName FROM Students WHERE ID = NEW.ThirdPrizeWinnerID), (SELECT FirstName || ' ' || LastName FROM ExternalParticipants WHERE ID = NEW.ThirdPrizeWinnerID)),
        COALESCE((SELECT EmailID FROM Students WHERE ID = NEW.ThirdPrizeWinnerID), (SELECT EmailID FROM ExternalParticipants WHERE ID = NEW.ThirdPrizeWinnerID)),
        COALESCE((SELECT College FROM ExternalParticipants WHERE ID = NEW.ThirdPrizeWinnerID), 'IIT Kharagpur')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER addEventThirdWinnersViewTrigger
AFTER INSERT ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION addEventThirdWinnersView();

create or replace function updateEventThirdWinnersView()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM EventThirdWinnersView WHERE EventID = OLD.EventID AND ParticipantID = OLD.ThirdPrizeWinnerID;
    INSERT INTO EventThirdWinnersView (EventID, EventName, EventType, VenueID, Description, Date, Time, Prize, ParticipantID, ParticipantName, ParticipantEmailID, ParticipantCollege) 
    VALUES(
        (SELECT ID FROM Events WHERE ID = NEW.EventID),
        (SELECT Name FROM Events WHERE ID = NEW.EventID),
        (SELECT Type FROM Events WHERE ID = NEW.EventID),
        (SELECT VenueID FROM Events WHERE ID = NEW.EventID),
        (SELECT Description FROM Events WHERE ID = NEW.EventID),
        (SELECT Date FROM Events WHERE ID = NEW.EventID),
        (SELECT Time FROM Events WHERE ID = NEW.EventID),
        (SELECT Prize FROM Events WHERE ID = NEW.EventID),
        (SELECT ParticipantID FROM EventParticipants WHERE ParticipantID = NEW.ThirdPrizeWinnerID),
        COALESCE((SELECT FirstName || ' ' || LastName FROM Students WHERE ID = NEW.ThirdPrizeWinnerID), (SELECT FirstName || ' ' || LastName FROM ExternalParticipants WHERE ID = NEW.ThirdPrizeWinnerID)),
        COALESCE((SELECT EmailID FROM Students WHERE ID = NEW.ThirdPrizeWinnerID), (SELECT EmailID FROM ExternalParticipants WHERE ID = NEW.ThirdPrizeWinnerID)),
        COALESCE((SELECT College FROM ExternalParticipants WHERE ID = NEW.ThirdPrizeWinnerID), 'IIT Kharagpur')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER updateEventThirdWinnersViewTrigger
AFTER UPDATE ON EventWinners
FOR EACH ROW
EXECUTE FUNCTION updateEventThirdWinnersView();

INSERT INTO AdministratorEmails (EmailID) 
VALUES
  ('administrator1@example.com'),
  ('administrator2@example.com'),
  ('administrator3@example.com'),
  ('administrator4@example.com'),
  ('administrator5@example.com'),
  ('administrator6@example.com'),
  ('administrator7@example.com'),
  ('administrator8@example.com'),
  ('administrator9@example.com'),
  ('administrator10@example.com'),
  ('administrator11@example.com'),
  ('administrator12@example.com'),
  ('administrator13@example.com'),
  ('administrator14@example.com'),
  ('administrator15@example.com'),
  ('administrator16@example.com'),
  ('administrator17@example.com'),
  ('administrator18@example.com'),
  ('administrator19@example.com'),
  ('administrator20@example.com'),
  ('administrator21@example.com'),
  ('administrator22@example.com'),
  ('administrator23@example.com'),
  ('administrator24@example.com'),
  ('administrator25@example.com'),
  ('administrator26@example.com'),
  ('administrator27@example.com');

-- Generate 20 rows of mock data for Administrators table
INSERT INTO Administrators (FirstName, LastName, Hash, Salt, EmailID)
VALUES
  ('John', 'Doe', 'hash1', 'salt1', 'administrator1@example.com'),
  ('Jane', 'Smith', 'hash2', 'salt2', 'administrator2@example.com'),
  ('Alice', 'Johnson', 'hash3', 'salt3', 'administrator3@example.com'),
  ('Bob', 'Williams', 'hash4', 'salt4', 'administrator4@example.com'),
  ('Charlie', 'Brown', 'hash5', 'salt5', 'administrator5@example.com'),
  ('David', 'Lee', 'hash6', 'salt6', 'administrator6@example.com'),
  ('Eva', 'Clark', 'hash7', 'salt7', 'administrator7@example.com'),
  ('Frank', 'Miller', 'hash8', 'salt8', 'administrator8@example.com'),
  ('Grace', 'Jones', 'hash9', 'salt9', 'administrator9@example.com'),
  ('Harry', 'White', 'hash10', 'salt10', 'administrator10@example.com');


-- Generate 20 rows of mock data for Venues table
INSERT INTO Venues (Name, Capacity)
VALUES
  ('Conference Hall A', 200),
  ('Ballroom B', 150),
  ('Exhibition Center C', 500),
  ('Meeting Room D', 50),
  ('Auditorium E', 300),
  ('Banquet Hall F', 200),
  ('Lecture Hall G', 100),
  ('Function Room H', 75),
  ('Grand Ballroom I', 400),
  ('Seminar Room J', 80),
  ('Gala Hall K', 250),
  ('Multipurpose Hall L', 300),
  ('Training Room M', 60),
  ('Convention Center N', 450),
  ('Event Space O', 120),
  ('Symposium Hall P', 150),
  ('Banquet Room Q', 180),
  ('Workshop Venue R', 70),
  ('Expo Hall S', 350),
  ('Conference Room T', 90);

-- Generate 20 rows of mock data for Events table
INSERT INTO Events (Name, Type, VenueID, Description, Date, Time, Prize)
VALUES
  ('Tech Conference', 'Conference', 1, 'Annual technology conference', '2024-03-15', '09:00:00', 5000.00),
  ('Music Festival', 'Festival', 2, 'International music festival', '2024-05-20', '18:00:00', 10000.00),
  ('Business Expo', 'Expo', 3, 'Showcasing business innovations', '2024-04-10', '10:30:00', 8000.00),
  ('Networking Mixer', 'Networking', 4, 'Professional networking event', '2024-06-05', '17:30:00', NULL),
  ('Art Exhibition', 'Exhibition', 5, 'Contemporary art showcase', '2024-07-08', '15:00:00', 6000.00),
  ('Corporate Training', 'Training', 6, 'Employee development program', '2024-04-25', '11:00:00', NULL),
  ('Science Symposium', 'Symposium', 7, 'Cutting-edge scientific discussions', '2024-08-12', '09:30:00', 7500.00),
  ('Startup Pitch Day', 'Pitch', 8, 'Showcasing innovative startups', '2024-05-05', '14:00:00', 9000.00),
  ('Fashion Show', 'Fashion', 9, 'International fashion runway', '2024-09-18', '19:00:00', 12000.00),
  ('Educational Workshop', 'Workshop', 10, 'Hands-on learning experience', '2024-07-01', '13:30:00', NULL),
  ('Film Premiere', 'Premiere', 11, 'Exclusive film screening', '2024-10-03', '20:30:00', 8500.00),
  ('Health and Wellness Expo', 'Expo', 12, 'Promoting health and well-being', '2024-06-15', '12:00:00', 7000.00),
  ('Culinary Festival', 'Festival', 13, 'Celebrating diverse cuisines', '2024-11-08', '16:45:00', 11000.00),
  ('Environmental Summit', 'Summit', 14, 'Addressing environmental challenges', '2024-08-28', '10:00:00', NULL),
  ('Gaming Tournament', 'Tournament', 15, 'Esports gaming competition', '2024-12-01', '18:30:00', 9500.00),
  ('Book Fair', 'Fair', 16, 'Showcasing literary works', '2024-07-22', '14:45:00', 6700.00),
  ('Automotive Expo', 'Expo', 17, 'Showcasing latest automotive innovations', '2024-01-15', '11:15:00', 8200.00),
  ('Dance Competition', 'Competition', 18, 'International dance championship', '2024-09-30', '19:30:00', NULL),
  ('Tech Hackathon', 'Hackathon', 19, 'Coding and innovation challenge', '2024-03-05', '08:00:00', 7500.00),
  ('Community Outreach', 'Outreach', 20, 'Engaging with the local community', '2024-02-10', '16:00:00', NULL);

-- Generate 20 rows of mock data for Sponsors table without EventID
INSERT INTO Sponsors (Name, EmailID)
VALUES
  ('ABC Company', 'abc@example.com'),
  ('XYZ Corporation', 'xyz@example.com'),
  ('Acme Inc.', 'acme@example.com'),
  ('Global Solutions', 'global@example.com'),
  ('Tech Innovators', 'tech@example.com'),
  ('Future Enterprises', 'future@example.com'),
  ('Infinite Innovations', 'infinite@example.com'),
  ('Mega Solutions', 'mega@example.com'),
  ('Epic Ventures', 'epic@example.com'),
  ('NexGen Technologies', 'nexgen@example.com'),
  ('Alpha Innovations', 'alpha@example.com'),
  ('Omega Corporation', 'omega@example.com'),
  ('Supreme Solutions', 'supreme@example.com'),
  ('Unified Technologies', 'unified@example.com'),
  ('Revolutionary Ventures', 'revolutionary@example.com'),
  ('Prime Innovators', 'prime@example.com'),
  ('Elite Solutions', 'elite@example.com'),
  ('Galactic Ventures', 'galactic@example.com'),
  ('Pinnacle Technologies', 'pinnacle@example.com'),
  ('Solar Innovations', 'solar@example.com');

-- Generate mock data for OrganizerEmails table (50 unique email IDs)
INSERT INTO OrganizerEmails (EmailID)
VALUES
  ('organizer1@example.com'),
  ('organizer2@example.com'),
  ('organizer3@example.com'),
  ('organizer4@example.com'),
  ('organizer5@example.com'),
  ('organizer6@example.com'),
  ('organizer7@example.com'),
  ('organizer8@example.com'),
  ('organizer9@example.com'),
  ('organizer10@example.com'),
  ('organizer11@example.com'),
  ('organizer12@example.com'),
  ('organizer13@example.com'),
  ('organizer14@example.com'),
  ('organizer15@example.com'),
  ('organizer16@example.com'),
  ('organizer17@example.com'),
  ('organizer18@example.com'),
  ('organizer19@example.com'),
  ('organizer20@example.com'),
  ('organizer21@example.com'),
  ('organizer22@example.com'),
  ('organizer23@example.com'),
  ('organizer24@example.com'),
  ('organizer25@example.com'),
  ('organizer26@example.com'),
  ('organizer27@example.com'),
  ('organizer28@example.com'),
  ('organizer29@example.com'),
  ('organizer30@example.com'),
  ('organizer31@example.com'),
  ('organizer32@example.com'),
  ('organizer33@example.com'),
  ('organizer34@example.com'),
  ('organizer35@example.com'),
  ('organizer36@example.com'),
  ('organizer37@example.com'),
  ('organizer38@example.com'),
  ('organizer39@example.com'),
  ('organizer40@example.com'),
  ('organizer41@example.com'),
  ('organizer42@example.com'),
  ('organizer43@example.com'),
  ('organizer44@example.com'),
  ('organizer45@example.com'),
  ('organizer46@example.com'),
  ('organizer47@example.com'),
  ('organizer48@example.com'),
  ('organizer49@example.com'),
  ('organizer50@example.com');

-- Generate 20 rows of mock data for Organizers table using specified OrganiserType values
INSERT INTO Organizers (FirstName, LastName, Hash, Salt, isVerified, EmailID, EmailToken, OrganiserType)
VALUES
  ('John', 'Doe', 'hash1', 'salt1', true, 'organizer1@example.com', 'token1', 'Event Coordinator'),
  ('Jane', 'Smith', 'hash2', 'salt2', false, 'organizer2@example.com', 'token2', 'Logistics Manager'),
  ('Alice', 'Johnson', 'hash3', 'salt3', true, 'organizer3@example.com', 'token3', 'Marketing Specialist'),
  ('Bob', 'Williams', 'hash4', 'salt4', false, 'organizer4@example.com', 'token4', 'Technical Lead'),
  ('Charlie', 'Brown', 'hash5', 'salt5', true, 'organizer5@example.com', 'token5', 'Volunteer Coordinator'),
  ('David', 'Lee', 'hash6', 'salt6', false, 'organizer6@example.com', 'token6', 'Event Coordinator'),
  ('Eva', 'Clark', 'hash7', 'salt7', true, 'organizer7@example.com', 'token7', 'Marketing Specialist'),
  ('Frank', 'Miller', 'hash8', 'salt8', false, 'organizer8@example.com', 'token8', 'Technical Lead'),
  ('Grace', 'Jones', 'hash9', 'salt9', true, 'organizer9@example.com', 'token9', 'Volunteer Coordinator'),
  ('Harry', 'White', 'hash10', 'salt10', false, 'organizer10@example.com', 'token10', 'Logistics Manager'),
  ('Isabel', 'Smith', 'hash11', 'salt11', true, 'organizer11@example.com', 'token11', 'Technical Lead'),
  ('Jack', 'Johnson', 'hash12', 'salt12', false, 'organizer12@example.com', 'token12', 'Marketing Specialist'),
  ('Kelly', 'Brown', 'hash13', 'salt13', true, 'organizer13@example.com', 'token13', 'Volunteer Coordinator'),
  ('Liam', 'Jones', 'hash14', 'salt14', false, 'organizer14@example.com', 'token14', 'Event Coordinator'),
  ('Mia', 'Williams', 'hash15', 'salt15', true, 'organizer15@example.com', 'token15', 'Technical Lead'),
  ('Nathan', 'Clark', 'hash16', 'salt16', false, 'organizer16@example.com', 'token16', 'Marketing Specialist'),
  ('Olivia', 'Smith', 'hash17', 'salt17', true, 'organizer17@example.com', 'token17', 'Volunteer Coordinator'),
  ('Paul', 'Miller', 'hash18', 'salt18', false, 'organizer18@example.com', 'token18', 'Logistics Manager'),
  ('Quinn', 'Johnson', 'hash19', 'salt19', true, 'organizer19@example.com', 'token19', 'Technical Lead'),
  ('Ryan', 'Brown', 'hash20', 'salt20', false, 'organizer20@example.com', 'token20', 'Marketing Specialist');

-- Generate 20 rows of mock data for Students table
-- Generate 20 rows of mock data for Students table with different names
INSERT INTO Students (FirstName, LastName, Hash, Salt, isVerified, EmailToken, EmailID, isVolunteer)
VALUES
  ('Emily', 'Johnson', 'hash1', 'salt1', true, 'token1', 'emily.johnson@example.com', false),
  ('Daniel', 'Smith', 'hash2', 'salt2', false, 'token2', 'daniel.smith@example.com', false),
  ('Sophia', 'Miller', 'hash3', 'salt3', true, 'token3', 'sophia.miller@example.com', false),
  ('Christopher', 'Williams', 'hash4', 'salt4', false, 'token4', 'christopher.williams@example.com', false),
  ('Ava', 'Brown', 'hash5', 'salt5', true, 'token5', 'ava.brown@example.com', false),
  ('Logan', 'Clark', 'hash6', 'salt6', false, 'token6', 'logan.clark@example.com', false),
  ('Grace', 'Taylor', 'hash7', 'salt7', true, 'token7', 'grace.taylor@example.com', false),
  ('Ethan', 'White', 'hash8', 'salt8', false, 'token8', 'ethan.white@example.com', false),
  ('Hannah', 'Jones', 'hash9', 'salt9', true, 'token9', 'hannah.jones@example.com', false),
  ('William', 'Lee', 'hash10', 'salt10', false, 'token10', 'william.lee@example.com', false),
  ('Sophie', 'Anderson', 'hash11', 'salt11', true, 'token11', 'sophie.anderson@example.com', false),
  ('Liam', 'Martin', 'hash12', 'salt12', false, 'token12', 'liam.martin@example.com', false),
  ('Emma', 'Moore', 'hash13', 'salt13', true, 'token13', 'emma.moore@example.com', false),
  ('Jackson', 'Harris', 'hash14', 'salt14', false, 'token14', 'jackson.harris@example.com', false),
  ('Aria', 'Brown', 'hash15', 'salt15', true, 'token15', 'aria.brown@example.com', false),
  ('Henry', 'Taylor', 'hash16', 'salt16', false, 'token16', 'henry.taylor@example.com', false),
  ('Mia', 'Jones', 'hash17', 'salt17', true, 'token17', 'mia.jones@example.com', false),
  ('Oliver', 'Miller', 'hash18', 'salt18', false, 'token18', 'oliver.miller@example.com', false),
  ('Ella', 'Johnson', 'hash19', 'salt19', true, 'token19', 'ella.johnson@example.com', false),
  ('Lucas', 'Davis', 'hash20', 'salt20', false, 'token20', 'lucas.davis@example.com', false);

INSERT INTO ExternalParticipants (FirstName, LastName, Hash, Salt, isVerified, EmailToken, EmailID, College, GuestHouseName, RoomNumber)
VALUES
  ('Michael', 'Smith', 'hash21', 'salt21', true, 'token21', 'michael.smith@example.com', 'XYZ College', 'Guest House A', '101'),
  ('Abigail', 'Jones', 'hash22', 'salt22', false, 'token22', 'abigail.jones@example.com', 'ABC University', 'Guest House B', '202'),
  ('Benjamin', 'Taylor', 'hash23', 'salt23', true, 'token23', 'benjamin.taylor@example.com', 'PQR Institute', 'Guest House C', '303'),
  ('Olivia', 'Brown', 'hash24', 'salt24', false, 'token24', 'olivia.brown@example.com', 'LMN College', 'Guest House D', '404'),
  ('Daniel', 'Clark', 'hash25', 'salt25', true, 'token25', 'daniel.clark@example.com', 'UVW University', 'Guest House E', '505'),
  ('Avery', 'White', 'hash26', 'salt26', false, 'token26', 'avery.white@example.com', 'XYZ College', 'Guest House F', '606'),
  ('Jackson', 'Martin', 'hash27', 'salt27', true, 'token27', 'jackson.martin@example.com', 'ABC University', 'Guest House G', '707'),
  ('Chloe', 'Lee', 'hash28', 'salt28', false, 'token28', 'chloe.lee@example.com', 'PQR Institute', 'Guest House H', '808'),
  ('Gabriel', 'Taylor', 'hash29', 'salt29', true, 'token29', 'gabriel.taylor@example.com', 'LMN College', 'Guest House I', '909'),
  ('Aria', 'Harris', 'hash30', 'salt30', false, 'token30', 'aria.harris@example.com', 'UVW University', 'Guest House J', '1001'),
  ('Caleb', 'Davis', 'hash31', 'salt31', true, 'token31', 'caleb.davis@example.com', 'XYZ College', 'Guest House K', '1102'),
  ('Ava', 'Miller', 'hash32', 'salt32', false, 'token32', 'ava.miller@example.com', 'ABC University', 'Guest House L', '1203'),
  ('Lucas', 'Brown', 'hash33', 'salt33', true, 'token33', 'lucas.brown@example.com', 'PQR Institute', 'Guest House M', '1304'),
  ('Emma', 'Anderson', 'hash34', 'salt34', false, 'token34', 'emma.anderson@example.com', 'LMN College', 'Guest House N', '1405'),
  ('Liam', 'Taylor', 'hash35', 'salt35', true, 'token35', 'liam.taylor@example.com', 'UVW University', 'Guest House O', '1506'),
  ('Isabella', 'Moore', 'hash36', 'salt36', false, 'token36', 'isabella.moore@example.com', 'XYZ College', 'Guest House P', '1607'),
  ('Noah', 'Jones', 'hash37', 'salt37', true, 'token37', 'noah.jones@example.com', 'ABC University', 'Guest House Q', '1708'),
  ('Ella', 'Williams', 'hash38', 'salt38', false, 'token38', 'ella.williams@example.com', 'PQR Institute', 'Guest House R', '1809'),
  ('Mia', 'Brown', 'hash39', 'salt39', true, 'token39', 'mia.brown@example.com', 'LMN College', 'Guest House S', '1910'),
  ('Oliver', 'Clark', 'hash40', 'salt40', false, 'token40', 'oliver.clark@example.com', 'UVW University', 'Guest House T', '2011');

INSERT INTO Volunteers (StudentID) 
VALUES
(1001),
(1003),
(1004),
(1005), 
(1007),
(1009), 
(1011), 
(1014), 
(1017), 
(1020);

INSERT INTO EventExternalParticipants (EventID, ParticipantID)
VALUES 
(1, 2001),
(13,2002),
(2, 2004),
(3, 2006),
(6, 2008),
(9, 2020),
(15, 2018),
(19, 2013),
(12, 2011),
(20, 2010);

INSERT INTO EventStudents (EventID, StudentID)
VALUES 
(11, 1001),
(7,1002),
(6, 1004),
(5, 1006),
(4, 1008),
(17, 1020),
(12, 1018),
(14, 1013),
(10, 1011),
(18, 1010);

INSERT INTO EventOrganizers (EventID, OrganizerID)
VALUES
(1, 3001),
(13,3002),
(2, 3004),
(3, 3006),
(6, 3008),
(9, 3020),
(15, 3018),
(19, 3013),
(12, 3011),
(20, 3010),
(11, 3001),
(7,3002),
(6, 3004),
(5, 3006),
(4, 3008),
(17, 3020),
(12, 3018),
(14, 3013),
(10, 3011),
(18, 3010);

INSERT INTO EventSponsors (EventID, SponsorID)
VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(6, 6),
(7, 7),
(8, 8),
(9, 9), 
(10, 10),
(11, 11),
(12, 12),
(13, 13),
(14, 14),
(15, 15),
(16, 16),
(17, 17), 
(18, 18),
(19,19),
(20, 20);

INSERT INTO EventVolunteers (EventID, VolunteerID)
VALUES
(1, 1001),
(2, 1003),
(3, 1004),
(4, 1005), 
(5, 1007),
(6, 1009), 
(7, 1011), 
(8, 1014), 
(9, 1017), 
(10, 1020);

